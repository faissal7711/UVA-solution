//# UVA-solution
//solutions for the problems in UVA

//============================================================================
// Name        : test.cpp
// Author      : foo
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <bits/stdc++.h>

using namespace std;

#define endl '\n'
#define ull(a) unsigned long long a;//ulld defintion by name
#define ULL unsigned long long
#define li(a) list<int> a;
#define lch(a)list<char>a;
#define mvi map<vector<int> , int>
#define pi(d) printf("%d",d);
#define foo(i , x, n)for(int i = x ; i < n ; ++i)

typedef unsigned long long ull;
typedef long long ll;
typedef pair<ull, ull> pairull;
typedef pair<int, int> pairii;
typedef vector<string> vstr;
typedef deque<int> dqint;
typedef set<ull> setull;
typedef unsigned int ui;
typedef queue<int> qint;
typedef vector<ll> vll;
typedef vector<int> v;
typedef set<int> seti;
typedef set<ull> setull;
//ll x = 0,y = 0,s = 0;
int n, x, q;
v arr;
v arq;
int lowerup(int k) {
	int lo = 0, hi = n - 1, pos = -1, mid;
	while (lo <= hi) {
		mid = (lo + hi) / 2;
		if (arr[mid] == k) {
			pos = mid;
			hi = mid - 1;
		} else if (arr[mid] > k) {
			hi = mid - 1;
		} else {
			lo = mid + 1;
		}
	}
	return pos;
}
int main() {
	int foo = 1;
	while (cin >> n >> q) {
		if (!n && !q){
			return 0;
		}
		for (int i = 0; i < n; ++i) {
			cin >> x;
			arr.push_back(x);
		}
		sort(arr.begin(), arr.end());
		for (int i = 0; i < q; ++i) {
			cin >> x;
			arq.push_back(x);
		}
		cout<<"CASE# "<< foo++ <<":\n";
		for (int i = 0; i < q; ++i) {
			int yy = lowerup(arq[i]);
			if (yy > -1) {
				cout << arq[i] << " found at " << yy + 1<<endl;
			} else {
				cout << arq[i] << " not found\n";
			}
		}
		arq.clear();
		arr.clear();
	}
	return 0;
}
/*
 ll GCD(int b,int a){
 while(1){
 if(!q)return (ll)a;
 a /= b;
 q %= a % b;
 }
 }




 ll GCD(int b, int a) {

 if (!q)
 return (ll) a;
 a /= b;

 uphunt




 q = a % b;
 return GCD(q , a);

 }
 */
